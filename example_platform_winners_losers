-- Define the major platforms we want to analyze
-- This makes it easy to add or remove platforms we're interested in
WITH target_domains AS (
  SELECT domain FROM UNNEST([
    'youtube.com',
    'reddit.com',
    'forbes.com'
  ]) as domain
),

-- Get current positions (last 24 hours) for our target platforms
-- Extracts clean domain names from URLs and handles www/non-www variants
current_positions AS (
  SELECT 
    url,
    location,
    type,
    position,
    timestamp,
    REGEXP_EXTRACT(url, r'https?://(?:www\.)?(youtube\.com|reddit\.com|forbes\.com)') as domain
  FROM `organic_rankings.rankings`
  WHERE 
    timestamp >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 1 DAY)
    AND REGEXP_CONTAINS(url, r'https?://(?:www\.)?(youtube\.com|reddit\.com|forbes\.com)')
),

-- Get positions from 7 days ago for trend comparison
-- Uses same domain extraction logic as current_positions
previous_positions AS (
  SELECT 
    url,
    location,
    type,
    position as prev_position,
    timestamp as prev_timestamp,
    REGEXP_EXTRACT(url, r'https?://(?:www\.)?(youtube\.com|reddit\.com|forbes\.com)') as domain
  FROM `organic_rankings.rankings`
  WHERE 
    timestamp BETWEEN 
      TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 8 DAY) 
      AND TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7 DAY)
    AND REGEXP_CONTAINS(url, r'https?://(?:www\.)?(youtube\.com|reddit\.com|forbes\.com)')
),

-- Calculate key metrics for each platform
-- Includes rankings distribution, keyword coverage, and detailed top 10 performance
platform_metrics AS (
  SELECT
    c.domain,
    -- Count how many different keyword types this platform ranks for
    COUNT(DISTINCT c.type) as keywords_ranked_for,
    -- Average positions (current and previous) to track overall visibility
    AVG(c.position) as avg_current_position,
    AVG(p.prev_position) as avg_prev_position,
    -- Position improvement (positive = moving up in rankings)
    AVG(p.prev_position - c.position) as avg_position_improvement,
    -- Best position achieved across all keywords
    MIN(c.position) as best_position,
    -- Count of high-value rankings (top 3 and top 10)
    COUNT(CASE WHEN c.position <= 3 THEN 1 END) as top3_appearances,
    COUNT(CASE WHEN c.position <= 10 THEN 1 END) as top10_appearances,
    -- List all keyword types this platform ranks for
    STRING_AGG(DISTINCT c.type, ', ') as keyword_types,
    -- Detailed view of top 10 rankings with positions
    STRING_AGG(DISTINCT 
      CASE 
        WHEN c.position <= 10 THEN CONCAT(c.type, ' (', CAST(c.position as STRING), ')')
      END, 
      ', ' 
      ORDER BY c.position
    ) as top10_keyword_details
  FROM current_positions c
  LEFT JOIN previous_positions p
    ON c.domain = p.domain 
    AND c.location = p.location
    AND c.type = p.type
  GROUP BY c.domain
),

-- Categorize each platform's performance
-- Adds trend analysis and presence strength classifications
platform_presence AS (
  SELECT
    m.*,
    -- Classify trend based on position changes
    CASE
      WHEN avg_position_improvement > 0 THEN 'Gaining'
      WHEN avg_position_improvement < 0 THEN 'Declining'
      ELSE 'Stable'
    END as trend,
    -- Classify overall presence based on average position
    CASE
      WHEN avg_current_position <= 10 THEN 'Strong'
      WHEN avg_current_position <= 20 THEN 'Moderate'
      ELSE 'Weak'
    END as presence_strength
  FROM platform_metrics m
),

-- Identify platforms that have no rankings at all
-- Ensures we don't miss platforms that are completely absent
missing_platforms AS (
  SELECT 
    t.domain,
    'No Rankings' as trend,
    'None' as presence_strength,
    0 as keywords_ranked_for,
    NULL as avg_current_position,
    NULL as avg_prev_position,
    NULL as avg_position_improvement,
    NULL as best_position,
    0 as top3_appearances,
    0 as top10_appearances,
    NULL as keyword_types,
    NULL as top10_keyword_details
  FROM target_domains t
  LEFT JOIN platform_metrics m ON t.domain = m.domain
  WHERE m.domain IS NULL
)

-- Final output combining all platforms (ranked and unranked)
-- Orders results by strength of presence and performance metrics
SELECT 
  COALESCE(p.domain, m.domain) as domain,
  COALESCE(p.trend, 'No Data') as trend,
  COALESCE(p.presence_strength, 'None') as presence_strength,
  COALESCE(p.keywords_ranked_for, 0) as keywords_ranked_for,
  p.avg_current_position,
  p.avg_prev_position,
  p.avg_position_improvement,
  p.best_position,
  COALESCE(p.top3_appearances, 0) as top3_appearances,
  COALESCE(p.top10_appearances, 0) as top10_appearances,
  p.keyword_types,
  p.top10_keyword_details
FROM platform_presence p
FULL OUTER JOIN missing_platforms m ON p.domain = m.domain
ORDER BY 
  -- Order by presence strength (Strong > Moderate > Weak > None)
  CASE presence_strength
    WHEN 'Strong' THEN 1
    WHEN 'Moderate' THEN 2
    WHEN 'Weak' THEN 3
    WHEN 'None' THEN 4
  END,
  -- Then by number of top 10 appearances
  COALESCE(top10_appearances, 0) DESC,
  -- Finally by average position (using 999 for missing positions)
  COALESCE(avg_current_position, 999);
